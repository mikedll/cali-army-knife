#!/usr/bin/env ruby

require 'thor'
require 'cknife/config'

class CKnifePg < Thor

  no_tasks do
    def config
      @config ||= CKnife::Config
    end
  end

  desc "capture", "Capture a dump of the database to db(current timestamp).dump."
  def capture
    file_name = "db" + Time.now.strftime("%Y%m%d%H%M%S") + ".dump"

    conf = {
      :host      => config['pg.host'] || "localhost",
      :port      => config['pg.port'] || 5432,
      :database  => config['pg.database'],
      :username  => config['pg.username'],
      :password  => config['pg.password']
    }

    pg_pass_file = ".pgpass"

    if File.exists?(pg_pass_file)
      say("This generates a pgpass file but one is already on disk. Exiting.")
      return
    end

    # pgpass format
    File.open(pg_pass_file, "w", 0600) { |f| f.write "#{conf[:host]}:#{conf[:port]}:#{conf[:database]}:#{conf[:username]}:#{conf[:password]}" }

    output = system({'PGPASSFILE' => pg_pass_file}, "pg_dump --no-owner -h #{conf[:host]} -p #{conf[:port]} -U #{conf[:username]} --no-password -f #{file_name} #{conf[:database]}")

    say("Captured #{file_name}.")

    FileUtils.rm(pg_pass_file)
    if File.exists?(pg_pass_file)
      say("Failed to remove pg_pass file. Please remove it for security purposes.")
    end
  end

  desc "restore [FILENAME]", "Restore a file. Use the one with the most recent mtime by default. Searches for *.dump files in the CWD."
  def restore
    # find file.
    # invoke pgrestore
    # cleanup
  end
end

CKnifePg.start
